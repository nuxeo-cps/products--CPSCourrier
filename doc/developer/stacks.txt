=================
CPSCourrier Stack
=================

:Revision: $Id$

.. contents:: :depth: 1
.. sectnum::

It will be convenient for examples to have a pretty printer::

    >>> from pprint import PrettyPrinter
    >>> pretty_print=PrettyPrinter(width=50).pprint

Instantiation
-------------

This is a workflow stack that can hold Stack Element With Data
elements and provides a few further utilities

    >>> from Products.CPSCourrier.workflows.stacks import \
    ...                  CourrierStack

    >>> from Products.CPSWorkflow.interfaces import (IHierarchicalWorkflowStack,
    ...                                              IStackElement,)
    >>> stack = CourrierStack()
    >>> IHierarchicalWorkflowStack.providedBy(stack)
    True

We'll also use an example stack element that's basically a stack
element with data not tied to users/groups::

    >>> from Products.CPSCourrier.tests.stackelements import \
    ...	                     ExampleStackElement
    >>> IStackElement.implementedBy(ExampleStackElement)
    True

Pushing elements
----------------

Let's demonstrate how pushing elements work. Let's try with a single element::

    >>> from DateTime import DateTime
    >>> data_lists = ('date', 'comment')
    >>> date = DateTime('2006/03/10')
    >>> stack.push(push_ids=('example:el',), data_lists=data_lists,
    ...         date=(date,), comment=('a comment',), levels=(0,))
    >>> stack.getAllLevels()
    [0]
    >>> elt = stack._getLevelContentValues()[0]
    >>> elt.meta_type
    'Example Stack Element'
    >>> elt['comment']
    'a comment'
    >>> str(elt['date'])
    '2006/03/10'

Now several elements at once::

    >>> stack.push(push_ids=('example:A', 'example:B'),
    ...                 levels=(0,1,),
    ...                 data_lists=('d1', 'd2'),
    ...                 d1=('A1', 'B1',),
    ...                 d2=('A2', 'B2',))
    >>> stack.getAllLevels()
    [0, 1]
    >>> eltA = stack._getLevelContentValues()[1]
    >>> eltB = stack._getLevelContentValues(level=1)[0]
    >>> pretty_print(eltA())
    {'d2': 'A2', 'id': 'example:A', 'd1': 'A1'}
    >>> pretty_print(eltB())
    {'d2': 'B2', 'id': 'example:B', 'd1': 'B1'}

Rendering helpers
-----------------

    This stacks also provides preformatting methods, to be used by
    the render method. Let's see what the render helper for stack
    elements does::

    >>> elt = ExampleStackElement('example:el', data={'date':
    ...	   					      DateTime('2006/03/10')})
    >>> pretty_print(stack.getStackElementForRender(elt, 0, 'view'))
    {'date': DateTime('2006/03/10'),
    'date_str': '2006/03/10',
    'input_id': '0,example:el',
    'label_id': 'label_0,example:el'}

    In particular, the DateTime instance has been converted to a
    string. One can further specify the format::
    >>> infos = stack.getStackElementForRender(elt, 0, 'view',
    ...                          date_format='[%d.%m.%y]')
    >>> infos['date_str']
    '[10.03.06]'

.. Emacs
.. Local Variables:
.. mode: rst
.. End:
.. Vim
.. vim: set filetype=rst:



