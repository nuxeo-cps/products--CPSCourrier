==============
Stack Elements
==============

:Revision: $Id$

.. contents:: :depth: 1
.. sectnum::

It will be convenient for examples to have a pretty printer::

    >>> from pprint import PrettyPrinter
    >>> pretty_print=PrettyPrinter(width=50).pprint

Hierarchical Stack With Data
------------------------------------

This is a workflow stack that can hold Stack Element With Data
elements and provides a few further utilities

    >>> from Products.CPSCourrier.workflows.stacks import \
    ...                  HierarchicalStackWithData

    >>> from Products.CPSCourrier.interfaces import (IHierarchicalStackWithData,
    ...                                              IStackElementWithData,)
    >>> stack = HierarchicalStackWithData()
    >>> IHierarchicalStackWithData.providedBy(stack)
    True

We'll also use an example stack element that's basically a stack
element with data not tied to users/groups::

    >>> from Products.CPSCourrier.tests.stackelements import \
    ...	                     ExampleStackElement
    >>> IStackElementWithData.implementedBy(ExampleStackElement)
    True

Let's demonstrate how pushing elements work. Let's try with a single element::

    >>> from DateTime import DateTime
    >>> data_lists = ('date', 'comment')
    >>> date = DateTime('2006/03/10')
    >>> stack.push(push_ids=('example:el',), data_lists=data_lists,
    ...         date=(date,), comment=('a comment',), levels=(0,))
    >>> stack.getAllLevels()
    [0]
    >>> elt = stack._getLevelContentValues()[0]
    >>> elt.meta_type
    'Example Stack Element'
    >>> elt['comment']
    'a comment'
    >>> str(elt['date'])
    '2006/03/10'

Now several elements at once::

    >>> stack.push(push_ids=('example:A', 'example:B'),
    ...                 levels=(0,1,),
    ...                 data_lists=('d1', 'd2'),
    ...                 d1=('A1', 'B1',),
    ...                 d2=('A2', 'B2',))
    >>> stack.getAllLevels()
    [0, 1]
    >>> eltA = stack._getLevelContentValues()[1]
    >>> eltB = stack._getLevelContentValues(level=1)[0]
    >>> pretty_print(eltA())
    {'d2': 'A2', 'd1': 'A1'}
    >>> pretty_print(eltB())
    {'d2': 'B2', 'd1': 'B1'}

.. Emacs
.. Local Variables:
.. mode: rst
.. End:
.. Vim
.. vim: set filetype=rst:



