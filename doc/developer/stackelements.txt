==============
Stack Elements
==============

:Revision: $Id$

.. contents:: :depth: 1
.. sectnum::

It will be convenient for examples to have a pretty printer::

    >>> from pprint import PrettyPrinter
    >>> pretty_print=PrettyPrinter(width=50).pprint

Stack Element With Data
-----------------------

This is a stack element (see Products/CPSWorkflows) that implements
the dict API, and provides moreover some facilities to deal with default
values::

    >>> from Products.CPSCourrier.tests.stackelements import \
    ...                  ExampleStackElement
    >>> from Products.CPSCourrier.interfaces import IStackElementWithData
    >>> elt = ExampleStackElement('example:el', why='because')
    >>> elt
    <ExampleStackElement at example:el>
    >>> IStackElementWithData.providedBy(elt)
    True
    >>> elt['why']
    'because'

Default read and write values are specified in two dicts and stored
in corresponding attributes. To each data key corresponds either
a callable or a bound method name. *These dicts aren't persistent*. Let's
make a blank stack element with prepared defaults::

    >>> def aCall():
    ...     return 'A callable'
    >>> elt = ExampleStackElement('example:el')
    >>> elt._default_reads = {'acall': aCall, 'anattr': 'getId'}
    >>> elt._default_writes = {'wrote_call': aCall, 'wrote_attr': 'getId'}
    >>> aCall()
    'A callable'
    >>> elt.getId()
    'example:el'

The default read is used (only) in case a value hasn't been already set::

    >>> elt['acall']
    'A callable'
    >>> elt['acall'] = 'set'
    >>> elt['acall']
    'set'
    >>> elt['anattr']
    'example:el'

Default reads appear in the result dict of calling the element::

    >>> pretty_print(elt())
    {'acall': 'set',
     'anattr': 'example:el'}

Similarly, the default write is applied in case a value
isn't supplied and has not been set already. It is therefore suitable for
creation dates, for instance::

    >>> elt.update({})
    >>> elt['wrote_call']
    'A callable'
    >>> elt.update({'wrote_call': 'no miss'})
    >>> elt['wrote_call']
    'no miss'
    >>> elt.update({})
    >>> elt['wrote_call']
    'no miss'

Note also that default writes are applied at creation time even if no data is
passed. To see this we'll use the base class, since it has a default write::

    >>> from Products.CPSCourrier.workflows.stackelements import (
    ...                                                    StackElementWithData)
    >>> StackElementWithData._default_writes.keys()
    ['delegation_date']
    >>> elt = StackElementWithData('')
    >>> 'delegation_date' in elt
    True

.. Emacs
.. Local Variables:
.. mode: rst
.. End:
.. Vim
.. vim: set filetype=rst:



